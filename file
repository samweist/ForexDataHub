import { addMonths, format, subMonths } from "https://esm.sh/date-fns";

function generateFutureEvents(months = 6) {
  const events = [];
  const startDate = new Date();
  const endDate = addMonths(startDate, months);

  const countries = ["USA", "EU", "China", "UK", "Japan", "Australia", "Canada", "Switzerland"];
  const eventTypes = [
    "Interest Rate Decision",
    "GDP Release",
    "CPI Data",
    "Unemployment Rate",
    "Retail Sales",
    "PMI Data",
    "Trade Balance",
    "Non-Farm Payrolls",
  ];

  while (startDate < endDate) {
    if (startDate.getDay() >= 1 && startDate.getDay() <= 5) { // Weekdays only
      const eventCount = Math.floor(Math.random() * 3) + 1; // 1 to 3 events per day

      for (let i = 0; i < eventCount; i++) {
        const country = countries[Math.floor(Math.random() * countries.length)];
        const event = eventTypes[Math.floor(Math.random() * eventTypes.length)];
        const impact = Math.random() < 0.3 ? "High" : (Math.random() < 0.7 ? "Medium" : "Low");

        events.push({
          date: new Date(startDate.getTime() + Math.random() * 24 * 60 * 60 * 1000),
          event: `${country} ${event}`,
          country,
          impact,
        });
      }
    }
    startDate.setDate(startDate.getDate() + 1);
  }

  return events.sort((a, b) => a.date - b.date);
}

async function server(request: Request): Promise<Response> {
  const url = new URL(request.url);

  if (url.pathname === "/api/calendar") {
    const currentDate = new Date("2024-09-14");
    const futureEvents = generateFutureEvents().map(event => ({
      ...event,
      date: addMonths(event.date, 15), // Shift events 15 months into the future
    }));
    const predefinedEvents = [
      {
        date: addMonths(new Date("2024-09-15T12:00:00Z"), 0),
        event: "US Non-Farm Payrolls",
        country: "USA",
        impact: "High",
      },
      { date: addMonths(new Date("2024-09-16T09:00:00Z"), 0), event: "EU CPI", country: "EU", impact: "Medium" },
      { date: addMonths(new Date("2024-09-17T02:00:00Z"), 0), event: "China PMI", country: "China", impact: "High" },
      { date: addMonths(new Date("2024-09-18T08:00:00Z"), 0), event: "UK GDP", country: "UK", impact: "High" },
      {
        date: addMonths(new Date("2024-09-19T23:30:00Z"), 0),
        event: "Australia Interest Rate Decision",
        country: "Australia",
        impact: "High",
      },
      {
        date: addMonths(new Date("2024-09-25T18:00:00Z"), 0),
        event: "US Federal Reserve Interest Rate Decision",
        country: "USA",
        impact: "High",
      },
      {
        date: addMonths(new Date("2024-10-03T11:00:00Z"), 0),
        event: "EU ECB Interest Rate Decision",
        country: "EU",
        impact: "High",
      },
      {
        date: addMonths(new Date("2024-10-10T02:30:00Z"), 0),
        event: "Japan BOJ Interest Rate Decision",
        country: "Japan",
        impact: "High",
      },
      {
        date: addMonths(new Date("2024-10-17T11:00:00Z"), 0),
        event: "UK BOE Interest Rate Decision",
        country: "UK",
        impact: "High",
      },
    ];

    const allEvents = [...predefinedEvents, ...futureEvents].sort((a, b) => a.date.getTime() - b.date.getTime());

    return new Response(JSON.stringify(allEvents), { headers: { "Content-Type": "application/json" } });
  }

  // ... (keep other API endpoints)

  // HTML pages
  if (url.pathname === "/" || url.pathname === "/index.html") {
    let calendarEvents;
    try {
      const response = await fetch(new URL("/api/calendar", request.url));
      calendarEvents = await response.json();
      if (!Array.isArray(calendarEvents)) {
        throw new Error("Calendar events is not an array");
      }
    } catch (error) {
      console.error("Error fetching calendar events:", error);
      calendarEvents = []; // Use an empty array if there's an error
    }

    let html = `
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Forex Data Hub</title>
          ${getStyles()}
        </head>
        <body>
          <h1>Forex Data Hub</h1>
          <nav>
            <ul>
              <li><a href="/">Economic Calendar</a></li>
              <li><a href="/news">Market News</a></li>
              <li><a href="/indicators">Economic Indicators</a></li>
              <li><a href="/currency-pairs">Currency Pair Quotes</a></li>
              <li><a href="/historical-data">Historical Price Data</a></li>
            </ul>
          </nav>
          
          <h2>Economic Calendar</h2>
          <table>
            <thead>
              <tr>
                <th>Date</th>
                <th>Event</th>
                <th>Country</th>
                <th>Impact</th>
              </tr>
            </thead>
            <tbody>
    `;

    calendarEvents.slice(0, 20).forEach(event => {
      html += `
        <tr>
          <td>${format(new Date(event.date), "yyyy/MM/dd 'at' h:mm a")}</td>
          <td>${event.event}</td>
          <td>${event.country}</td>
          <td>${event.impact}</td>
        </tr>
      `;
    });

    html += `
            </tbody>
          </table>
        </body>
      </html>
    `;

    return new Response(html, { headers: { "Content-Type": "text/html" } });
  }

  // ... (keep other routes)

  // If no matching route is found, return a JSON response
  return new Response(JSON.stringify({ error: "Not Found" }), {
    status: 404,
    headers: { "Content-Type": "application/json" },
  });
}

function getStyles() {
  return `
    <style>
      body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
      table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
      th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
      th { background-color: #f2f2f2; }
      h1, h2 { margin-top: 30px; }
      nav ul { list-style-type: none; padding: 0; }
      nav ul li { display: inline; margin-right: 10px; }
      nav ul li a { text-decoration: none; color: #007bff; }
      nav ul li a:hover { text-decoration: underline; }
    </style>
  `;
}

export default server;
